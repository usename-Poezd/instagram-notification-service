// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	services "github.com/SmmTouch-com/instagram-notification-service/internal/services"
	gomock "github.com/golang/mock/gomock"
)

// MockZeus is a mock of Zeus interface.
type MockZeus struct {
	ctrl     *gomock.Controller
	recorder *MockZeusMockRecorder
}

// MockZeusMockRecorder is the mock recorder for MockZeus.
type MockZeusMockRecorder struct {
	mock *MockZeus
}

// NewMockZeus creates a new mock instance.
func NewMockZeus(ctrl *gomock.Controller) *MockZeus {
	mock := &MockZeus{ctrl: ctrl}
	mock.recorder = &MockZeusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZeus) EXPECT() *MockZeusMockRecorder {
	return m.recorder
}

// CheckMessageCampaignSent mocks base method.
func (m *MockZeus) CheckMessageCampaignSent(id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMessageCampaignSent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMessageCampaignSent indicates an expected call of CheckMessageCampaignSent.
func (mr *MockZeusMockRecorder) CheckMessageCampaignSent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMessageCampaignSent", reflect.TypeOf((*MockZeus)(nil).CheckMessageCampaignSent), id)
}

// CreateCampaign mocks base method.
func (m *MockZeus) CreateCampaign(input services.CampaignInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockZeusMockRecorder) CreateCampaign(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockZeus)(nil).CreateCampaign), input)
}

// DeleteCampaign mocks base method.
func (m *MockZeus) DeleteCampaign(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaign", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCampaign indicates an expected call of DeleteCampaign.
func (mr *MockZeusMockRecorder) DeleteCampaign(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaign", reflect.TypeOf((*MockZeus)(nil).DeleteCampaign), id)
}

// GetLogs mocks base method.
func (m *MockZeus) GetLogs(id int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockZeusMockRecorder) GetLogs(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockZeus)(nil).GetLogs), id)
}

// StartCampaign mocks base method.
func (m *MockZeus) StartCampaign(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCampaign", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCampaign indicates an expected call of StartCampaign.
func (mr *MockZeusMockRecorder) StartCampaign(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCampaign", reflect.TypeOf((*MockZeus)(nil).StartCampaign), id)
}

// StopCampaign mocks base method.
func (m *MockZeus) StopCampaign(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCampaign", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCampaign indicates an expected call of StopCampaign.
func (mr *MockZeusMockRecorder) StopCampaign(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCampaign", reflect.TypeOf((*MockZeus)(nil).StopCampaign), id)
}

// MockLocale is a mock of Locale interface.
type MockLocale struct {
	ctrl     *gomock.Controller
	recorder *MockLocaleMockRecorder
}

// MockLocaleMockRecorder is the mock recorder for MockLocale.
type MockLocaleMockRecorder struct {
	mock *MockLocale
}

// NewMockLocale creates a new mock instance.
func NewMockLocale(ctrl *gomock.Controller) *MockLocale {
	mock := &MockLocale{ctrl: ctrl}
	mock.recorder = &MockLocaleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocale) EXPECT() *MockLocaleMockRecorder {
	return m.recorder
}

// GetMessageByKey mocks base method.
func (m *MockLocale) GetMessageByKey(key, lang string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByKey", key, lang)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByKey indicates an expected call of GetMessageByKey.
func (mr *MockLocaleMockRecorder) GetMessageByKey(key, lang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByKey", reflect.TypeOf((*MockLocale)(nil).GetMessageByKey), key, lang)
}
